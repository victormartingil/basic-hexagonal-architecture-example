# Docker Compose - Infraestructura completa para Hexarch
# Uso: docker-compose up -d
#
# Servicios incluidos:
# - PostgreSQL: Base de datos principal (puerto 5432)
# - Zookeeper: Coordinación para Kafka (puerto 2181)
# - Kafka: Message broker para integration events (puerto 9092)
# - Kafka UI: Interfaz web para monitorear Kafka (puerto 8090)
# - Prometheus: Metrics collection (puerto 9090)
# - Grafana: Metrics visualization (puerto 3000, admin/admin)
# - Zipkin: Distributed tracing UI (puerto 9411)

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: hexarch-postgres
    environment:
      POSTGRES_DB: hexarch_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hexarch-network

  # Zookeeper (requerido por Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: hexarch-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - hexarch-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: hexarch-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
    ports:
      - "9092:9092"
    networks:
      - hexarch-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Kafka UI (opcional pero útil para debugging)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: hexarch-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: hexarch-local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8090:8080"
    networks:
      - hexarch-network

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: hexarch-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - hexarch-network
    restart: unless-stopped

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:10.2.3
    container_name: hexarch-grafana
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - hexarch-network
    restart: unless-stopped

  # Zipkin - Distributed Tracing
  zipkin:
    image: openzipkin/zipkin:2.24
    container_name: hexarch-zipkin
    environment:
      - STORAGE_TYPE=mem
    ports:
      - "9411:9411"
    networks:
      - hexarch-network
    restart: unless-stopped

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  postgres_data:
    driver: local

networks:
  hexarch-network:
    driver: bridge
