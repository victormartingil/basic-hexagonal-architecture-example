package com.example.hexarch.user.infrastructure.adapter.output.event.listener;

import com.example.hexarch.user.domain.event.UserCreatedEvent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.event.EventListener;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

/**
 * INFRASTRUCTURE LAYER - Event Listener
 *
 * Listener que reacciona al evento UserCreatedEvent para actualizar estad√≠sticas de usuarios.
 * Demuestra c√≥mo m√∫ltiples listeners pueden procesar el mismo evento de forma independiente.
 *
 * M√öLTIPLES LISTENERS PARA EL MISMO EVENTO:
 * Este es el SEGUNDO listener para UserCreatedEvent. Tambi√©n existe:
 * - SendWelcomeEmailListener: Env√≠a email de bienvenida
 * - (Futuros): AuditListener, AnalyticsListener, etc.
 *
 * Todos se ejecutan cuando se publica el evento, de forma independiente.
 *
 * ORDEN DE EJECUCI√ìN:
 * - @Order(2): Este listener se ejecuta segundo (despu√©s del email listener que tiene @Order(1))
 * - N√∫meros m√°s bajos = mayor prioridad
 * - Sin @Order: No hay garant√≠a de orden
 *
 * USO REAL DE ESTAD√çSTICAS:
 * En un sistema real, este listener actualizar√≠a:
 * - Contador total de usuarios registrados
 * - Estad√≠sticas por fecha (usuarios registrados hoy/mes/a√±o)
 * - Segmentaci√≥n de usuarios (por regi√≥n, edad, etc.)
 * - KPIs para dashboards de negocio
 * - Cache de estad√≠sticas para consultas r√°pidas
 *
 * PATR√ìN CQRS:
 * Este listener es perfecto para CQRS:
 * - Comando (Write): CreateUser crea el usuario
 * - Query (Read): Este listener actualiza tablas denormalizadas para consultas r√°pidas
 * - Ejemplo: tabla "user_statistics" con contadores precalculados
 *
 * VENTAJAS DE ESTE ENFOQUE:
 * - ‚úÖ CreateUserService no sabe nada de estad√≠sticas
 * - ‚úÖ Si quitas/agregas estad√≠sticas, no tocas el core business logic
 * - ‚úÖ Puedes agregar nuevos listeners sin modificar c√≥digo existente
 * - ‚úÖ Cada listener es independiente y testeable
 *
 * CONSIDERACIONES DE PERFORMANCE:
 * - Este listener es s√≠ncrono (se ejecuta en la misma transacci√≥n)
 * - Para operaciones lentas, usa @Async o @TransactionalEventListener(phase = AFTER_COMMIT)
 * - Si falla, puede causar rollback de la creaci√≥n del usuario
 */
@Component
@Order(2)  // Se ejecuta segundo, despu√©s del email listener
public class UpdateUserStatsListener {

    private static final Logger logger = LoggerFactory.getLogger(UpdateUserStatsListener.class);

    /**
     * Maneja el evento UserCreatedEvent actualizando estad√≠sticas
     *
     * Este m√©todo se ejecuta autom√°ticamente cuando se publica UserCreatedEvent.
     * Se ejecuta DESPU√âS del SendWelcomeEmailListener (debido a @Order(2)).
     *
     * FLUJO:
     * 1. Usuario es creado en CreateUserService
     * 2. Se publica UserCreatedEvent
     * 3. Spring ejecuta SendWelcomeEmailListener (@Order(1))
     * 4. Spring ejecuta este listener (@Order(2))
     * 5. Estad√≠sticas se actualizan
     *
     * SIMULACI√ìN:
     * En este ejemplo solo logueamos, pero en un sistema real aqu√≠:
     * - Incrementar√≠as contador en Redis: INCR users:total
     * - Actualizar√≠as tabla de estad√≠sticas: UPDATE user_stats SET total = total + 1
     * - Registrar√≠as m√©trica en sistema de monitoring (Prometheus, DataDog)
     * - Enviar√≠as evento a analytics (Google Analytics, Mixpanel)
     *
     * EJEMPLO REAL CON REDIS:
     * <pre>
     * {@code
     * @EventListener
     * @Order(2)
     * public void onUserCreated(UserCreatedEvent event) {
     *     // Incrementar contador total
     *     redisTemplate.opsForValue().increment("stats:users:total");
     *
     *     // Incrementar contador del d√≠a
     *     String today = LocalDate.now().toString();
     *     redisTemplate.opsForValue().increment("stats:users:daily:" + today);
     *
     *     // Registrar en sistema de analytics
     *     analyticsService.track("user.registered", Map.of(
     *         "userId", event.userId(),
     *         "timestamp", event.occurredAt()
     *     ));
     *
     *     logger.info("User statistics updated for userId: {}", event.userId());
     * }
     * }
     * </pre>
     *
     * EJEMPLO REAL CON BASE DE DATOS:
     * <pre>
     * {@code
     * @EventListener
     * @Order(2)
     * public void onUserCreated(UserCreatedEvent event) {
     *     // Actualizar tabla denormalizada de estad√≠sticas
     *     userStatsRepository.incrementTotalUsers();
     *     userStatsRepository.incrementUsersToday();
     *
     *     // Guardar en tabla de eventos para analytics
     *     UserRegistrationEvent analyticsEvent = new UserRegistrationEvent(
     *         event.userId(),
     *         event.occurredAt(),
     *         extractMetadata(event)
     *     );
     *     analyticsEventRepository.save(analyticsEvent);
     *
     *     logger.info("Analytics and statistics updated for userId: {}", event.userId());
     * }
     * }
     * </pre>
     *
     * @param event el evento que contiene los datos del usuario creado
     */
    @EventListener
    public void onUserCreated(UserCreatedEvent event) {
        logger.info("üìä [EVENT LISTENER] User created - Updating user statistics for user: {} (id: {})",
            event.username(), event.userId());

        // TODO: En un sistema real, aqu√≠ actualizar√≠as estad√≠sticas
        // redisTemplate.opsForValue().increment("stats:users:total");
        // userStatsRepository.incrementTotalUsers();
        // analyticsService.trackUserRegistration(event);

        // Simulaci√≥n de actualizaci√≥n de estad√≠sticas
        try {
            logger.debug("Incrementing total users counter...");
            logger.debug("Updating daily registration stats...");
            logger.debug("Recording user registration timestamp: {}", event.occurredAt());

            // Simular diferentes tipos de estad√≠sticas
            logger.debug("Stats updated:");
            logger.debug("  - Total users: +1");
            logger.debug("  - Users registered today: +1");
            logger.debug("  - Last registration: {}", event.occurredAt());

            logger.info("‚úÖ User statistics updated successfully for userId: {}", event.userId());

        } catch (Exception e) {
            // En un sistema real, aqu√≠ manejar√≠as errores de actualizaci√≥n
            logger.error("‚ùå Failed to update statistics for userId: {}. Error: {}",
                event.userId(), e.getMessage());

            // IMPORTANTE: Decide si esto debe fallar la creaci√≥n del usuario
            // Generalmente, estad√≠sticas no son cr√≠ticas, as√≠ que NO lanzamos excepci√≥n
            // El usuario se crea correctamente aunque fallen las estad√≠sticas
        }
    }

    /**
     * EJEMPLO ADICIONAL: Listener as√≠ncrono con @Async
     *
     * Si descomentas este m√©todo y comentas el anterior, ver√°s c√≥mo hacer un listener as√≠ncrono.
     * Requiere @EnableAsync en una clase de configuraci√≥n.
     *
     * VENTAJAS DE @Async:
     * - No bloquea la transacci√≥n principal
     * - El usuario se crea inmediatamente sin esperar las estad√≠sticas
     * - Mejor performance percibida
     *
     * DESVENTAJAS DE @Async:
     * - Se ejecuta FUERA de la transacci√≥n
     * - Si la app se cae, el evento puede perderse
     * - M√°s dif√≠cil de debuguear
     */
    /*
    @Async
    @EventListener
    @Order(2)
    public void onUserCreatedAsync(UserCreatedEvent event) {
        logger.info("üìä [ASYNC EVENT LISTENER] Updating statistics asynchronously for user: {}",
            event.username());

        // Este c√≥digo se ejecuta en otro thread
        // No bloquea la creaci√≥n del usuario
        // Ideal para operaciones que pueden tardar (llamadas a APIs externas, etc.)

        try {
            // Simulaci√≥n de operaci√≥n lenta
            Thread.sleep(1000);
            logger.info("‚úÖ Async statistics updated for userId: {}", event.userId());
        } catch (Exception e) {
            logger.error("‚ùå Failed to update async statistics: {}", e.getMessage());
        }
    }
    */
}
