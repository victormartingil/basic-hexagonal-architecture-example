# ===================================================================
# PROFILE: PRODUCTION
# ===================================================================
# Activar con: SPRING_PROFILES_ACTIVE=prod
#
# CARACTERÍSTICAS:
# - Logs mínimos (WARN/ERROR level)
# - SQL NO visible en consola
# - Tracing al 10% (para reducir overhead)
# - JSON compacto (sin pretty print)
# - CORS restrictivo (solo dominios específicos)
# - Configuración optimizada para producción

spring:
  # ===================================================================
  # CONFIGURACIÓN DE LOGGING - PRODUCTION
  # ===================================================================
  logging:
    level:
      root: WARN  # Solo warnings y errors
      com.example.hexarch: INFO  # Info level para nuestra aplicación
      org.hibernate.SQL: WARN  # NO mostrar SQL queries
      org.springframework.web: WARN  # Mínimo logging de Spring

  # ===================================================================
  # CONFIGURACIÓN DE JPA - PRODUCTION
  # ===================================================================
  jpa:
    show-sql: false  # NO mostrar SQL en consola (performance)

  # ===================================================================
  # CONFIGURACIÓN DE JACKSON - PRODUCTION
  # ===================================================================
  jackson:
    serialization:
      indent_output: false  # JSON compacto (menos bytes en la red)

# ===================================================================
# CONFIGURACIÓN DE OBSERVABILIDAD - PRODUCTION
# ===================================================================
management:
  tracing:
    sampling:
      probability: 0.1  # 10% de requests traced (reducir overhead)

  # Solo exponer endpoints esenciales
  endpoints:
    web:
      exposure:
        include: health,metrics,prometheus

  endpoint:
    health:
      show-details: when-authorized  # No mostrar detalles a usuarios no autorizados

# ===================================================================
# CONFIGURACIÓN DE CORS - PRODUCTION
# ===================================================================
cors:
  # ⚠️ IMPORTANTE: Especificar SOLO dominios de producción
  # Ejemplo: https://app.example.com,https://admin.example.com
  # NUNCA usar "*" (wildcard) con credentials
  allowed-origins: ${CORS_ALLOWED_ORIGINS:https://app.example.com}

# ===================================================================
# CONFIGURACIÓN DE JWT - PRODUCTION
# ===================================================================
jwt:
  # ⚠️ CRÍTICO: SIEMPRE usar variable de entorno en producción
  # NUNCA commitear secretos reales a Git
  secret: ${JWT_SECRET}  # SIN valor por defecto - debe estar en env vars

  # Access token de corta duración (15-60 minutos recomendado)
  expiration: ${JWT_EXPIRATION:3600000}  # 1 hora por defecto

# ===================================================================
# CONFIGURACIÓN DE BASE DE DATOS - PRODUCTION
# ===================================================================
# NOTA: En producción, usar variables de entorno para credenciales
spring:
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://postgres:5432/hexarch_db}
    username: ${DATABASE_USERNAME:postgres}
    password: ${DATABASE_PASSWORD}  # SIN default - debe estar en env vars

  # HikariCP optimizado para producción
  hikari:
    maximum-pool-size: ${DB_POOL_SIZE:20}  # Ajustar según carga
    minimum-idle: ${DB_POOL_MIN_IDLE:10}

# ===================================================================
# CONFIGURACIÓN DE KAFKA - PRODUCTION
# ===================================================================
spring:
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka:9092}

    # Producer con máxima durabilidad
    producer:
      properties:
        enable.idempotence: true
        acks: all  # Esperar confirmación de todos los replicas
        retries: 5  # Más reintentos en producción

    # Consumer
    consumer:
      auto-offset-reset: latest  # Solo mensajes nuevos (no releer todo el history)
      properties:
        # ⚠️ IMPORTANTE: En producción, especificar paquetes exactos
        spring.json.trusted.packages: com.example.hexarch

# ===================================================================
# CONFIGURACIÓN DE RESILIENCE4J - PRODUCTION
# ===================================================================
resilience4j:
  circuitbreaker:
    instances:
      emailService:
        # Configuración más conservadora para producción
        sliding-window-size: 20
        minimum-number-of-calls: 10
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s  # Esperar más antes de reintentar
        slow-call-duration-threshold: 10s
