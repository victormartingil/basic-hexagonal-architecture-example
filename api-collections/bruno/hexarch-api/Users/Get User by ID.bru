meta {
  name: Get User by ID
  type: http
  seq: 2
}

get {
  url: {{baseUrl}}/api/{{apiVersion}}/users/{{userId}}
  body: none
  auth: none
}

params:path {
  userId: {{userId}}
}

docs {
  # Get User by ID

  Retrieves a user by their unique identifier (UUID).

  ## CQRS Pattern
  This is a **Query** operation (Read side of CQRS).

  ## Path Parameters
  - `id` (UUID, required): User unique identifier

  ## Expected Responses

  ### 200 OK
  User found successfully. Returns the complete user object.

  ### 404 Not Found
  User with the specified ID does not exist.

  ### 500 Internal Server Error
  Unexpected server error.

  ## Example Usage
  1. First create a user using "Create User" endpoint
  2. Copy the returned `id` from the response
  3. Use that `id` in this request's path parameter

  Alternatively, the `userId` environment variable is automatically set when you create a user with tests enabled.

  ## Response Example
  ```json
  {
    "id": "550e8400-e29b-41d4-a716-446655440000",
    "username": "johndoe",
    "email": "john@example.com",
    "enabled": true,
    "createdAt": "2024-01-15T10:30:00.123Z"
  }
  ```
}

tests {
  test("Status code should be 200", function() {
    expect(res.getStatus()).to.equal(200);
  });

  test("Response should have required fields", function() {
    const body = res.getBody();
    expect(body).to.have.property('id');
    expect(body).to.have.property('username');
    expect(body).to.have.property('email');
    expect(body).to.have.property('enabled');
    expect(body).to.have.property('createdAt');
  });

  test("ID should be a valid UUID format", function() {
    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
    expect(res.getBody().id).to.match(uuidRegex);
  });

  test("Email should be valid format", function() {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    expect(res.getBody().email).to.match(emailRegex);
  });

  test("Enabled should be boolean", function() {
    expect(res.getBody().enabled).to.be.a('boolean');
  });
}
