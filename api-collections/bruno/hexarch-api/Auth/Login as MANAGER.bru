meta {
  name: Login as MANAGER
  type: http
  seq: 2
}

post {
  url: {{baseUrl}}/api/{{apiVersion}}/auth/login
  body: json
  auth: none
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "username": "manager",
    "role": "MANAGER"
  }
}

docs {
  # Login as MANAGER

  Generates a JWT token with **MANAGER** role for testing purposes.

  ## Manager Permissions
  - ‚úÖ Read users
  - ‚úÖ Update users
  - ‚ùå Delete users (requires ADMIN)
  - ‚ùå Create users (requires ADMIN)

  ## Token Auto-Save
  The token is automatically saved to the `authToken` environment variable
  after a successful login, so you don't need to copy/paste it manually.

  ## Usage Flow
  1. Run this request
  2. Token is auto-saved to `{{authToken}}`
  3. Run "Get User by ID" or similar requests
  4. They will use the manager token automatically

  ## Expected Response
  ```json
  {
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "type": "Bearer",
    "username": "manager",
    "roles": ["MANAGER"],
    "expiresIn": 86400000
  }
  ```
}

tests {
  test("Status code should be 200", function() {
    expect(res.getStatus()).to.equal(200);
  });

  test("Response should have token", function() {
    expect(res.getBody().token).to.be.a('string');
  });

  test("Role should be MANAGER", function() {
    expect(res.getBody().roles).to.include('MANAGER');
  });

  test("Token should be saved to environment", function() {
    expect(bru.getEnvVar("authToken")).to.be.a('string');
  });
}

script:post-response {
  // Auto-save token to environment variable
  if (res.getStatus() === 200) {
    const token = res.getBody().token;
    bru.setEnvVar("authToken", token);
    console.log("‚úÖ Token saved to authToken variable");
    console.log("üîë Token expires in:", res.getBody().expiresIn / 1000 / 60, "minutes");
  }
}
