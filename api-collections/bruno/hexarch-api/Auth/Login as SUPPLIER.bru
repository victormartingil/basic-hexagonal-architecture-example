meta {
  name: Login as SUPPLIER
  type: http
  seq: 4
}

post {
  url: {{baseUrl}}/api/{{apiVersion}}/auth/login
  body: json
  auth: none
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "username": "supplier",
    "role": "SUPPLIER"
  }
}

docs {
  # Login as SUPPLIER

  Generates a JWT token with **SUPPLIER** role for testing purposes.

  ## Supplier Permissions
  - ‚úÖ Limited access to specific supplier operations
  - ‚ùå Cannot manage users
  - ‚ùå Cannot access admin endpoints

  ## Use Case
  This role is designed for external suppliers who need limited access
  to specific parts of the system (e.g., inventory, orders).

  ## Token Auto-Save
  The token is automatically saved to the `authToken` environment variable.

  ## Permission Boundaries
  Useful to test multi-tenant or partner-specific authorization scenarios.
  Suppliers typically have access only to their own data.

  ## Expected Response
  ```json
  {
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "type": "Bearer",
    "username": "supplier",
    "roles": ["SUPPLIER"],
    "expiresIn": 86400000
  }
  ```
}

tests {
  test("Status code should be 200", function() {
    expect(res.getStatus()).to.equal(200);
  });

  test("Response should have token", function() {
    expect(res.getBody().token).to.be.a('string');
  });

  test("Role should be SUPPLIER", function() {
    expect(res.getBody().roles).to.include('SUPPLIER');
  });

  test("Token should be saved to environment", function() {
    expect(bru.getEnvVar("authToken")).to.be.a('string');
  });
}

script:post-response {
  // Auto-save token to environment variable
  if (res.getStatus() === 200) {
    const token = res.getBody().token;
    bru.setEnvVar("authToken", token);
    console.log("‚úÖ Token saved to authToken variable");
    console.log("üîë Token expires in:", res.getBody().expiresIn / 1000 / 60, "minutes");
  }
}
