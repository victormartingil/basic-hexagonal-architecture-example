name: E2E Tests (with Docker Compose)

# ============================================================================
# CONFIGURACI√ìN DE TRIGGERS
# ============================================================================
#
# Este workflow ejecuta tests E2E completos con docker-compose.
# Est√° configurado para ejecutarse SOLO MANUALMENTE por defecto.
#
# ‚ö†Ô∏è IMPORTANTE - L√çMITES DE GITHUB ACTIONS:
# - GitHub Free: 2000 minutos/mes (repos privados), ilimitado (p√∫blicos)
# - Este workflow consume ~8-10 minutos por ejecuci√≥n
# - Levanta docker-compose completo (PostgreSQL, Kafka, Zipkin, etc.)
#
# ============================================================================
# C√ìMO ACTIVAR/DESACTIVAR ESTE WORKFLOW:
# ============================================================================
#
# OPCI√ìN 1: Solo manual (ACTUAL - Recomendado)
# ‚úÖ Ejecutar solo cuando lo necesites desde GitHub UI
# ‚úÖ No consume minutos autom√°ticamente
# ‚úÖ Ideal para validaci√≥n antes de releases
#
# OPCI√ìN 2: Autom√°tico en Pull Requests (DESACTIVADO)
# Para activar, descomenta las l√≠neas marcadas con [AUTO-PR]
# ‚ö†Ô∏è Consumir√° minutos en cada PR
#
# OPCI√ìN 3: Autom√°tico en Push a Main (DESACTIVADO)
# Para activar, descomenta las l√≠neas marcadas con [AUTO-MAIN]
# ‚ö†Ô∏è Consumir√° minutos en cada push a main
#
# OPCI√ìN 4: Scheduled (DESACTIVADO)
# Para activar, descomenta las l√≠neas marcadas con [SCHEDULED]
# ‚ö†Ô∏è Consumir√° minutos semanalmente
# ============================================================================

on:
  # ‚úÖ ACTIVADO: Ejecutar manualmente desde GitHub UI
  # Ir a: Actions > E2E Tests > Run workflow
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode'
        required: false
        default: 'local'
        type: choice
        options:
          - local
          - docker

      skip_infra:
        description: 'Skip infrastructure startup (if already running)'
        required: false
        default: false
        type: boolean

  # ‚ùå DESACTIVADO: Ejecutar en Pull Requests
  # [AUTO-PR] Descomenta las siguientes l√≠neas para activar:
  # pull_request:
  #   branches: [ main ]
  #   paths:
  #     - 'src/**'
  #     - 'pom.xml'
  #     - 'docker-compose.yml'
  #     - '.github/workflows/e2e-tests.yml'

  # ‚ùå DESACTIVADO: Ejecutar en Push a Main
  # [AUTO-MAIN] Descomenta las siguientes l√≠neas para activar:
  # push:
  #   branches: [ main ]
  #   paths:
  #     - 'src/**'
  #     - 'pom.xml'

  # ‚ùå DESACTIVADO: Ejecutar semanalmente
  # [SCHEDULED] Descomenta las siguientes l√≠neas para activar:
  # schedule:
  #   - cron: '0 3 * * 1'  # Cada lunes a las 3am UTC

# ============================================================================
# JOBS
# ============================================================================
jobs:
  e2e-test-local:
    name: E2E Tests (Local Mode - Testcontainers)
    runs-on: ubuntu-latest
    # Solo ejecutar en modo "local" o si no se especific√≥ modo
    if: ${{ !inputs.test_mode || inputs.test_mode == 'local' }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: ‚òï Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üèÉ Run E2E tests (Local Mode with Testcontainers)
        run: ./mvnw test -Pe2e-tests -Dkarate.env=local
        env:
          TESTCONTAINERS_RYUK_DISABLED: false

      - name: üìä Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results-local
          path: |
            target/surefire-reports/
            target/karate-reports/

      - name: üìù Generate test summary
        if: always()
        run: |
          echo "## ü•í E2E Test Results (Local Mode)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -d target/karate-reports ]; then
            echo "‚úÖ E2E tests completed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Test Environment:** Testcontainers (embedded)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå E2E tests failed" >> $GITHUB_STEP_SUMMARY
          fi

  e2e-test-docker:
    name: E2E Tests (Docker Mode - Full Stack)
    runs-on: ubuntu-latest
    # Solo ejecutar en modo "docker"
    if: ${{ inputs.test_mode == 'docker' }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: ‚òï Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: üê≥ Start infrastructure (docker-compose)
        if: ${{ !inputs.skip_infra }}
        run: |
          echo "üöÄ Starting infrastructure..."
          docker-compose up -d
          echo "‚úÖ Infrastructure started"

      - name: ‚è≥ Wait for services to be ready
        if: ${{ !inputs.skip_infra }}
        run: |
          echo "‚è≥ Waiting for PostgreSQL..."
          timeout 60 bash -c 'until docker exec hexarch-postgres pg_isready -U postgres; do sleep 2; done'
          echo "‚úÖ PostgreSQL ready"

          echo "‚è≥ Waiting for Kafka..."
          timeout 60 bash -c 'until docker exec hexarch-kafka kafka-broker-api-versions --bootstrap-server localhost:9092 > /dev/null 2>&1; do sleep 2; done'
          echo "‚úÖ Kafka ready"

          echo "‚è≥ Waiting for Zipkin..."
          timeout 30 bash -c 'until curl -s http://localhost:9411/health > /dev/null; do sleep 2; done'
          echo "‚úÖ Zipkin ready"

          echo "‚úÖ All services ready!"

      - name: üìã Show running containers
        run: docker ps

      - name: üèóÔ∏è Build application
        run: ./mvnw clean package -DskipTests

      - name: üöÄ Start application
        run: |
          nohup java -jar target/*.jar > application.log 2>&1 &
          echo $! > application.pid
          echo "Application started with PID: $(cat application.pid)"

      - name: ‚è≥ Wait for application to be ready
        run: |
          echo "‚è≥ Waiting for application..."
          timeout 60 bash -c 'until curl -s http://localhost:8080/actuator/health | grep -q "UP"; do sleep 2; done'
          echo "‚úÖ Application ready!"

      - name: ü•í Run E2E tests (Docker Mode)
        run: ./mvnw test -Pe2e-tests -Dkarate.env=docker
        continue-on-error: false

      - name: üìä Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results-docker
          path: |
            target/surefire-reports/
            target/karate-reports/
            application.log

      - name: üîç Show application logs (if failed)
        if: failure()
        run: |
          echo "=== Application Logs ==="
          cat application.log || echo "No application logs found"

      - name: üîç Show docker logs (if failed)
        if: failure()
        run: |
          echo "=== PostgreSQL Logs ==="
          docker logs hexarch-postgres || true
          echo "=== Kafka Logs ==="
          docker logs hexarch-kafka || true

      - name: üõë Stop application
        if: always()
        run: |
          if [ -f application.pid ]; then
            kill $(cat application.pid) || true
          fi

      - name: üõë Stop infrastructure
        if: always()
        run: |
          docker-compose down -v
          docker system prune -f

      - name: üìù Generate test summary
        if: always()
        run: |
          echo "## ü•í E2E Test Results (Docker Mode)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -d target/karate-reports ]; then
            echo "‚úÖ E2E tests completed with full infrastructure" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Test Environment:** Docker Compose (full stack)" >> $GITHUB_STEP_SUMMARY
            echo "- PostgreSQL: ‚úÖ" >> $GITHUB_STEP_SUMMARY
            echo "- Kafka + Zookeeper: ‚úÖ" >> $GITHUB_STEP_SUMMARY
            echo "- Zipkin: ‚úÖ" >> $GITHUB_STEP_SUMMARY
            echo "- Prometheus + Grafana: ‚úÖ" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå E2E tests failed" >> $GITHUB_STEP_SUMMARY
          fi

# ============================================================================
# NOTAS IMPORTANTES
# ============================================================================
#
# 1. MODO LOCAL vs DOCKER:
#    - Local: Usa Testcontainers (m√°s r√°pido, ~5 min)
#    - Docker: Usa docker-compose (m√°s completo, ~10 min)
#
# 2. CONSUMO DE MINUTOS:
#    - Local Mode: ~5-6 minutos
#    - Docker Mode: ~10-12 minutos
#
# 3. C√ìMO EJECUTAR MANUALMENTE:
#    - Ir a: Actions > E2E Tests (with Docker Compose) > Run workflow
#    - Seleccionar modo: local o docker
#    - Opcional: Skip infrastructure startup si ya est√° corriendo
#
# 4. RECOMENDACIONES:
#    - Usar Local Mode para testing r√°pido
#    - Usar Docker Mode para validaci√≥n completa antes de releases
#    - Mantener desactivado el trigger autom√°tico para ahorrar minutos
#    - Activar solo cuando sea necesario (antes de releases importantes)
#
# ============================================================================
