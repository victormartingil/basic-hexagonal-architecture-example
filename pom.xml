<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.5.7</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>hexarch</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>hexarch</name>
	<description>Demo project for Spring Boot with Hexagonal Architecture</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>21</java.version>
		<mapstruct.version>1.6.3</mapstruct.version>
		<openapi-generator.version>7.2.0</openapi-generator.version>
		<springdoc.version>2.3.0</springdoc.version>
		<archunit.version>1.3.0</archunit.version>
		<karate.version>1.5.0</karate.version>

		<!-- Code Quality -->
		<jacoco.version>0.8.12</jacoco.version>
		<!-- SonarCloud (OPCIONAL - Solo si lo configuras en GitHub Secrets) -->
		<!-- Obtén estos valores de https://sonarcloud.io después de crear tu proyecto -->
		<sonar.organization>tu-organizacion-sonarcloud</sonar.organization>
		<sonar.host.url>https://sonarcloud.io</sonar.host.url>
		<sonar.projectKey>tu-usuario_nombre-proyecto</sonar.projectKey>

		<!-- JaCoCo Configuration -->
		<jacoco.coverage.minimum>0.80</jacoco.coverage.minimum>
		<jacoco.coverage.minimum.branches>0.65</jacoco.coverage.minimum.branches>
		<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
		<sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
		<sonar.jacoco.reportPath>${project.basedir}/target/jacoco.exec</sonar.jacoco.reportPath>
		<sonar.language>java</sonar.language>

		<!-- Exclusions for generated code -->
		<sonar.exclusions>
			**/target/generated-sources/**,
			**/dto/generated/**,
			**/api/generated/**,
			**/*Entity.java,
			**/*Application.java
		</sonar.exclusions>
		<sonar.coverage.exclusions>
			**/target/generated-sources/**,
			**/dto/generated/**,
			**/api/generated/**,
			**/*Entity.java,
			**/*Application.java,
			**/*Config.java,
			**/*Configuration.java
		</sonar.coverage.exclusions>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>

		<!-- Kafka -->
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>

		<!-- Spring Security -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>

		<!-- JWT -->
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-api</artifactId>
			<version>0.12.6</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-impl</artifactId>
			<version>0.12.6</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-jackson</artifactId>
			<version>0.12.6</version>
			<scope>runtime</scope>
		</dependency>

		<!-- Resilience4j (Circuit Breaker, Retry, Rate Limiter) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>
		<dependency>
			<groupId>io.github.resilience4j</groupId>
			<artifactId>resilience4j-spring-boot3</artifactId>
			<version>2.1.0</version>
		</dependency>

		<!-- Distributed Tracing - Micrometer Tracing -->
		<!-- Micrometer Tracing provides distributed tracing capabilities -->
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-tracing-bridge-brave</artifactId>
		</dependency>
		<!-- Zipkin reporter for sending traces (optional, can be disabled) -->
		<dependency>
			<groupId>io.zipkin.reporter2</groupId>
			<artifactId>zipkin-reporter-brave</artifactId>
		</dependency>
		<!-- Propagate trace IDs in logs -->
		<dependency>
			<groupId>net.logstash.logback</groupId>
			<artifactId>logstash-logback-encoder</artifactId>
			<version>7.4</version>
		</dependency>

		<!-- Database -->
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-database-postgresql</artifactId>
		</dependency>

		<!-- Lombok -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>

		<!-- MapStruct -->
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>${mapstruct.version}</version>
		</dependency>

		<!-- OpenAPI / Swagger -->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>${springdoc.version}</version>
		</dependency>
		<dependency>
			<groupId>org.openapitools</groupId>
			<artifactId>jackson-databind-nullable</artifactId>
			<version>0.2.6</version>
		</dependency>

		<!-- Testing -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-testcontainers</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>postgresql</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- ArchUnit para tests de arquitectura -->
		<dependency>
			<groupId>com.tngtech.archunit</groupId>
			<artifactId>archunit-junit5</artifactId>
			<version>${archunit.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- Karate para E2E tests (v1.5.0+ usa groupId io.karatelabs) -->
		<dependency>
			<groupId>io.karatelabs</groupId>
			<artifactId>karate-junit5</artifactId>
			<version>${karate.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<!-- Lombok DEBE ir primero -->
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${lombok.version}</version>
						</path>
						<!-- MapStruct después de Lombok -->
						<path>
							<groupId>org.mapstruct</groupId>
							<artifactId>mapstruct-processor</artifactId>
							<version>${mapstruct.version}</version>
						</path>
						<!-- Binding Lombok + MapStruct -->
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok-mapstruct-binding</artifactId>
							<version>0.2.0</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
			<!-- OpenAPI Generator: Genera código desde openapi.yml -->
			<plugin>
				<groupId>org.openapitools</groupId>
				<artifactId>openapi-generator-maven-plugin</artifactId>
				<version>${openapi-generator.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<!-- Ubicación del archivo OpenAPI -->
							<inputSpec>${project.basedir}/src/main/resources/openapi/user-api.yml</inputSpec>
							<!-- Generador para Spring Boot -->
							<generatorName>spring</generatorName>
							<!-- Paquetes donde se generará el código -->
							<apiPackage>com.example.hexarch.user.infrastructure.adapter.input.rest.api</apiPackage>
							<modelPackage>com.example.hexarch.user.infrastructure.adapter.input.rest.dto.generated</modelPackage>
							<!-- Opciones de generación -->
							<configOptions>
								<!-- Solo generar interfaces (no implementaciones) -->
								<interfaceOnly>true</interfaceOnly>
								<!-- Spring Boot 3 -->
								<useSpringBoot3>true</useSpringBoot3>
								<!-- Usar tags de OpenAPI para agrupar -->
								<useTags>true</useTags>
								<!-- Usar Optional para campos opcionales -->
								<useOptional>true</useOptional>
								<!-- Usar Bean Validation -->
								<useBeanValidation>true</useBeanValidation>
								<performBeanValidation>true</performBeanValidation>
								<!-- Delegates para validation -->
								<delegatePattern>true</delegatePattern>
								<!-- Usar records para DTOs -->
								<useJakartaEe>true</useJakartaEe>
							</configOptions>
							<!-- Ignorar archivos innecesarios -->
							<generateApiTests>false</generateApiTests>
							<generateModelTests>false</generateModelTests>
							<generateApiDocumentation>false</generateApiDocumentation>
							<generateModelDocumentation>false</generateModelDocumentation>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Surefire Plugin: Excluye Integration Tests y E2E Tests por defecto -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<excludes>
						<!-- Excluye integration tests por defecto (requieren Docker) -->
						<exclude>**/*IntegrationTest.java</exclude>
						<!-- Excluye E2E tests por defecto (se ejecutan con profiles específicos) -->
						<exclude>**/KarateE2E*Test.java</exclude>
					</excludes>
					<!-- Argumentos JVM para compatibilidad con Java 21 y GraalVM (Karate) -->
					<argLine>
						--add-opens=java.base/java.lang=ALL-UNNAMED
						--add-opens=java.base/java.util=ALL-UNNAMED
						--add-opens=java.base/sun.nio.ch=ALL-UNNAMED
						--add-opens=java.base/java.io=ALL-UNNAMED
						--add-opens=java.base/sun.misc=ALL-UNNAMED
						@{argLine}
					</argLine>
					<!-- System properties para Karate -->
					<systemPropertyVariables>
						<!-- Desactivar GraalVM en Karate para compatibilidad con Java 21 -->
						<karate.graal>false</karate.graal>
					</systemPropertyVariables>
					<!-- Variables de entorno para Testcontainers -->
					<environmentVariables>
						<!-- Desactivar ryuk para compatibilidad con Rancher Desktop -->
						<!-- Ryuk es un contenedor de limpieza que falla con Rancher Desktop -->
						<TESTCONTAINERS_RYUK_DISABLED>true</TESTCONTAINERS_RYUK_DISABLED>
					</environmentVariables>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>

			<!-- JaCoCo: Code Coverage -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco.version}</version>
				<executions>
					<!-- Preparar el agente de JaCoCo antes de ejecutar tests -->
					<execution>
						<id>prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<!-- Generar reporte después de los tests -->
					<execution>
						<id>report</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
					<!-- Verificar cobertura mínima -->
					<execution>
						<id>check</id>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<rules>
								<rule>
									<element>BUNDLE</element>
									<limits>
										<limit>
											<counter>LINE</counter>
											<value>COVEREDRATIO</value>
											<minimum>${jacoco.coverage.minimum}</minimum>
										</limit>
										<limit>
											<counter>BRANCH</counter>
											<value>COVEREDRATIO</value>
											<minimum>${jacoco.coverage.minimum.branches}</minimum>
										</limit>
									</limits>
								</rule>
							</rules>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<!-- Excluir código generado -->
					<excludes>
						<exclude>**/target/generated-sources/**</exclude>
						<exclude>**/dto/generated/**</exclude>
						<exclude>**/api/generated/**</exclude>
						<exclude>**/rest/api/**</exclude>
						<exclude>**/*Entity.class</exclude>
						<exclude>**/*Application.class</exclude>
						<exclude>**/*Config.class</exclude>
						<exclude>**/*Configuration.class</exclude>
					</excludes>
				</configuration>
			</plugin>

			<!-- SonarQube: Code Quality Analysis -->
			<plugin>
				<groupId>org.sonarsource.scanner.maven</groupId>
				<artifactId>sonar-maven-plugin</artifactId>
				<version>4.0.0.4121</version>
			</plugin>
		</plugins>
	</build>

	<!-- Profiles -->
	<profiles>
		<!-- Profile para ejecutar Integration Tests (requiere Docker) -->
		<profile>
			<id>integration-tests</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<!-- EXCLUIR tests E2E de Karate - estos van en e2e-tests profile -->
							<excludes>
								<exclude>**/Karate*Test.java</exclude>
							</excludes>
							<includes>
								<include>**/*Test.java</include>
								<include>**/*IntegrationTest.java</include>
							</includes>
							<!-- IMPORTANTE: Ejecutar tests secuencialmente para evitar conflictos de Kafka embebido -->
							<!-- Los tests de Kafka no pueden ejecutarse en paralelo porque comparten el mismo EmbeddedKafka -->
							<forkCount>1</forkCount>
							<reuseForks>false</reuseForks>
							<!-- Variables de entorno para Testcontainers -->
							<environmentVariables>
								<!-- Desactivar ryuk para compatibilidad con Rancher Desktop -->
								<!-- Ryuk es un contenedor de limpieza que falla con Rancher Desktop -->
								<TESTCONTAINERS_RYUK_DISABLED>true</TESTCONTAINERS_RYUK_DISABLED>
							</environmentVariables>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Profile para ejecutar E2E Tests con Testcontainers (recomendado) -->
		<profile>
			<id>e2e-tests</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<!-- Solo ejecutar el test E2E con Testcontainers -->
							<excludes>
								<exclude>none</exclude>
							</excludes>
							<includes>
								<include>**/KarateE2ETestcontainersTest.java</include>
							</includes>
							<!-- Variables de entorno para Testcontainers -->
							<environmentVariables>
								<!-- Desactivar ryuk para compatibilidad con Rancher Desktop -->
								<TESTCONTAINERS_RYUK_DISABLED>true</TESTCONTAINERS_RYUK_DISABLED>
							</environmentVariables>
							<!-- System properties para Karate -->
							<systemPropertyVariables>
								<karate.env>local</karate.env>
							</systemPropertyVariables>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Profile para ejecutar E2E Tests contra Docker Compose -->
		<profile>
			<id>e2e-tests-docker</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<!-- Solo ejecutar el test E2E contra Docker -->
							<excludes>
								<exclude>none</exclude>
							</excludes>
							<includes>
								<include>**/KarateE2EDockerTest.java</include>
							</includes>
							<!-- System properties para Karate -->
							<systemPropertyVariables>
								<karate.env>docker</karate.env>
							</systemPropertyVariables>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>
